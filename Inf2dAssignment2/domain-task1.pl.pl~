% ---------------------------------------------------------------------
%  ----- Informatics 2D - 2011/12 - Second Assignment - Planning -----
% ---------------------------------------------------------------------
%
% Write here you matriculation number (only - your name is not needed)
% Matriculation Number: s1006260
%
%
% ------------------------- Domain Definition -------------------------
% This file describes a planning domain: a set of predicates and
% fluents that describe the state of the system, a set of actions and
% the axioms related to them. More than one problem can use the same
% domain definition, and therefore include this file




% --- Cross-file definitions ------------------------------------------
% marks the predicates whose definition is spread across two or more
% files
%
 :- multifile box/3, connexted/3, at/3, empty/3.





% --- Primitive control actions ---------------------------------------
% this section defines the name and the number of parameters of the
% actions available to the planner
%
% primitive_action( dosomething(_,_) ).	% underscore means 'anything'

primitive_action( move(_) ).
primitive_action( push(_) ).



% --- Precondition for primitive actions ------------------------------
% describe when an action can be carried out, in a generic situation S
%
% poss( doSomething(...), S ) :- preconditions(..., S).

poss( move(Direction), S ) :-
	at(Agent,X,S),
	connected(X,Y,Direction),
	empty(Y,S).

Poss( push(Direction),S) :-
	at(Agent,X,S),
	connected(X,Y,Direction),
	at(Box,Y,S),
	connected(Y,Z,Direction),
	empty(Z,S).



% --- Successor state axioms ------------------------------------------
% describe the value of fluent based on the previous situation and the
% action chosen for the plan. 
%
% fluent(..., result(A,S)) :- positive; previous-state, not(negative)

at(Agent,X,result(A,S)) :- ((A=move(Dir);A=push(Dir)).at(Agent,Y,S).connected(Y,X,Dir);(not(A=move(Dir)).not(A=push(Dir)).at(Agent,X,S)))

at(Box,X,result(A,S)) :- (at(Box,Y,S).connected(Y,X,Dir).A=push(Dir).connected(Z,Y,Dir).at(Agent,Z,S));(at(Box,X,S).not(connected(Y,X,Dir).at(Agent,Y,S).A=push(Dir)))

empty(X,result(A,S) :- (at(Agent,X,S).(A=move(Dir);A=push(Dir)));(empty(X,S).not(A=push(Dir).connected(Y,X,Dir).connected(Z,Y,Dir).at(Box,Y,S).at(Agent,Z,S)).not(A=move(Dir).connected(Y,X,Dir).at(Agent,Y,S))))



% ---------------------------------------------------------------------
% ---------------------------------------------------------------------
