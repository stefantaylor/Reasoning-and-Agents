% ---------------------------------------------------------------------
%  ----- Informatics 2D - 2011/12 - Second Assignment - Planning -----
% ---------------------------------------------------------------------
%
% Write here you matriculation number (only - your name is not needed)
% Matriculation Number: s1006260
%
%
% ------------------------- Domain Definition -------------------------
% This file describes a planning domain: a set of predicates and
% fluents that describe the state of the system, a set of actions and
% the axioms related to them. More than one problem can use the same
% domain definition, and therefore include this file




% --- Cross-file definitions ------------------------------------------
% marks the predicates whose definition is spread across two or more
% files
%
 :- multifile box/3, connected/3, at/3, empty/2, even/1.





% --- Primitive control actions ---------------------------------------
% this section defines the name and the number of parameters of the
% actions available to the planner
%
% primitive_action( dosomething(_,_) ).	% underscore means 'anything'

primitive_action( move(_) ).
primitive_action( push(_) ).



% --- Precondition for primitive actions ------------------------------
% describe when an action can be carried out, in a generic situation S
%
% poss( doSomething(...), S ) :- preconditions(..., S).

poss( move(Direction), S ) :-
	at(agent,X,S),
	connected(X,Y,Direction),
	empty(Y,S).

poss( push(Direction),S) :-
	at(agent,X,S),
	connected(X,Y,Direction),
	box(Box),
	at(Box,Y,S),
	connected(Y,Z,Direction),
	empty(Z,S).



% --- Successor state axioms ------------------------------------------
% describe the value of fluent based on the previous situation and the
% action chosen for the plan. 
%
% fluent(..., result(A,S)) :- positive; previous-state, not(negative)
at(agent,X,result(A,S)):-((A=move(Dir);A=push(Dir)),at(agent,Y,S),connected(Y,X,Dir);
				(at(agent,X,S),not(A=move(Dir)),not(A=push(Dir)))).


%at(Box,X,result(A,S)):-((at(Box,Y,S),box(Box),connected(Y,X,Dir),A=push(Dir),connected(Z,Y,Dir),at(agent,Z,S));
%			(at(Box,X,S),box(Box),not(A=push(Dir)));
%			(at(Box,X,S),box(Box),connected(Y,X,S),not(at(agent,Y,S)))).

%connected(Y,X,Dir),not(at(agent,Y,S)),(A=push(Dir)))).


at(Box,X,result(A,S)):-box(Box),((at(agent,Z,S),at(Box,Y,S),connected(Z,Y,Dir),connected(Y,X,S),A=push(Dir));
				(not(A=push(Dir)),at(Box,X,S)));
				(A=push(Dir),not(at(agent,Y,S)),connected(Y,X,Dir),at(Box,X,S))).





empty(X,result(A,S)):- (at(agent,X,S),(A=move(_);A=push(_)));
			(empty(X,S),(
			(connected(Y,X,S),connected(Z,Y,S),at(agent,Z,S),at(Box,Y,S),box(Box),not(A=push(Dir)));
			(connected(Y,X,S),connected(Z,Y,S),not(at(agent,Z,S)),at(Box,Y,S),box(Box),(A=push(Dir)));
			(connected(Y,X,S),at(agent,Y,S),not(A=move(Dir))))).

even(result(_,S)):- (not(even(S)).
%odd(result(_,S)):- (not(even(S)).





% ---------------------------------------------------------------------
% ---------------------------------------------------------------------
